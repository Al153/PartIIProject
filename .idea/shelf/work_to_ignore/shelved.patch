Index: src/main/scala/schema/RegisteredSchema.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/scala/schema/RegisteredSchema.scala	(revision )
+++ src/main/scala/schema/RegisteredSchema.scala	(revision )
@@ -0,0 +1,7 @@
+package schema
+
+abstract class RegisteredSchema {
+  def registered: List[SchemaObject[Any]]
+
+  def tables: Map[TableName, List[SchemaSummary]] = registered.map(r => r.name -> r.getSchemaSummary).toMap
+}
\ No newline at end of file
Index: src/test/scala/examples/Schema.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package examples\n\nimport core.{RelationAttributes, Singleton}\nimport schema._\n\n/**\n  * Created by Al on 15/10/2017.\n  */\nobject Schema {\n  case class Actor(n: String) { def name: String = n}\n  case class Movie(n: String, g: Genre) { def name: String = n}\n\n  case class Genre(g: String) // todo: this should be more typesafe to avoid mispellings - need a tagged table type\n\n  case class Date(year: Int, month: Int, day: Int)\n\n\n  sealed trait Country // todo: tagged type\n  case object UK extends Country\n  case object USA extends Country\n  case object NoCountry extends Country\n  /*\n    ...\n   */\n  case object ActsIn extends RelationAttributes[Actor, Movie]\n  case object Birthday extends RelationAttributes[Actor, Date]\n  case object hasNationality extends RelationAttributes[Actor, Country]\n  case object Borders extends RelationAttributes[Country, Country]\n\n  /*\n   * This is getting into category theory; we define a set of objects  by\n   * a relation (morphism) to each member object from the singleton\n   */\n  case object LinkedToTomCruise extends RelationAttributes[Singleton, Actor]\n\n  implicit def actorSchema = new SchemaObject1[Actor, String] {\n    override def construct(a1: String): Actor = Actor(a1)\n    override def name: TableName = TableName(\"Actors\")\n    override def toTuple(a: Actor): DBTuple1[Actor, String] = DBTuple1(a.name)\n  }\n\n  implicit def movieSchema = new schema.SchemaObject2[Movie, String, String] {\n    override def construct(a1: String, a2: String): Movie = Movie(a1, Genre(a2))\n    override def name: TableName = TableName(\"Movies\")\n    override def toTuple(m: Movie): DBTuple2[Movie, String, String] = DBTuple2(m.name, m.g.g)\n  }\n\n  implicit def DateSchema = new SchemaObject3[Date, Int, Int, Int] {\n    override def construct(year: Int, month: Int, day: Int): Date = Date(year, month, day)\n    override def name: TableName = TableName(\"Dates\")\n    override def toTuple(a: Date): DBTuple3[Date, Int, Int, Int] = DBTuple3(a.year, a.month, a.day)\n  }\n\n  implicit def CountrySchema = new SchemaObject1[Country, String] {\n    private val lookup: Map[String, Country] = Map(\"uk\" -> UK, \"usa\" -> USA, \"n/a\" -> NoCountry)\n    private val reverseLookup = lookup.map { case (a, b) => b -> a }\n    override def construct(a1: String): Country = lookup.getOrElse(a1, NoCountry)\n    override def name: TableName = TableName(\"Countries\")\n    override def toTuple(a: Country): DBTuple1[Country, String] = DBTuple1(reverseLookup.getOrElse(a, \"n/a\"))\n  }\n\n\n  val description = new SchemaDescription(Set[SchemaObject[Any]](actorSchema, movieSchema, DateSchema, CountrySchema), Set(ActsIn, Birthday, Borders, hasNationality, Borders, LinkedToTomCruise))\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/scala/examples/Schema.scala	(revision 8ffb8c6e9cb4f3cb26a6bc77b6a81321bae8e355)
+++ src/test/scala/examples/Schema.scala	(revision )
@@ -45,13 +45,13 @@
     override def toTuple(m: Movie): DBTuple2[Movie, String, String] = DBTuple2(m.name, m.g.g)
   }
 
-  implicit def DateSchema = new SchemaObject3[Date, Int, Int, Int] {
+  implicit def dateSchema = new SchemaObject3[Date, Int, Int, Int] {
     override def construct(year: Int, month: Int, day: Int): Date = Date(year, month, day)
     override def name: TableName = TableName("Dates")
     override def toTuple(a: Date): DBTuple3[Date, Int, Int, Int] = DBTuple3(a.year, a.month, a.day)
   }
 
-  implicit def CountrySchema = new SchemaObject1[Country, String] {
+  implicit def countrySchema = new SchemaObject1[Country, String] {
     private val lookup: Map[String, Country] = Map("uk" -> UK, "usa" -> USA, "n/a" -> NoCountry)
     private val reverseLookup = lookup.map { case (a, b) => b -> a }
     override def construct(a1: String): Country = lookup.getOrElse(a1, NoCountry)
@@ -59,6 +59,10 @@
     override def toTuple(a: Country): DBTuple1[Country, String] = DBTuple1(reverseLookup.getOrElse(a, "n/a"))
   }
 
+  val registeredSchema: RegisteredSchema = new RegisteredSchema {
+    override val registered = List(actorSchema, movieSchema, dateSchema, countrySchema)
+  }
+
 
   val description = new SchemaDescription(Set[SchemaObject[Any]](actorSchema, movieSchema, DateSchema, CountrySchema), Set(ActsIn, Birthday, Borders, hasNationality, Borders, LinkedToTomCruise))
 
